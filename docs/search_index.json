[["index.html", "Write Smarter with Overleaf and LaTeX About this Course 0.1 Available course formats", " Write Smarter with Overleaf and LaTeX October, 2025 About this Course This course is part of a series of courses for the Informatics Technology for Cancer Research (ITCR) called the Informatics Technology for Cancer Research Education Resource. This material was created by the ITCR Training Network (ITN) which is a collaborative effort of researchers around the United States to support cancer informatics and data science training through resources, technology, and events. This initiative is funded by the following grant: National Cancer Institute (NCI) UE5 CA254170. Our courses feature tools developed by ITCR Investigators and make it easier for principal investigators, scientists, and analysts to integrate cancer informatics into their workflows. Please see our website at itcrtraining.org for more information. Except where otherwise indicated, the contents of this course are available for use under the Creative Commons Attribution 4.0 license. You are free to adapt and share the work, but you must give appropriate credit, provide a link to the license, and indicate if changes were made. Sample attribution: Introduction to LaTeX and Overleaf for Scientific Articles by Fred Hutchinson Data Science Lab (CC-BY 4.0). You can download the illustrations by clicking here. 0.1 Available course formats This course is available in multiple formats which allows you to take it in the way that best suites your needs. You can take it for certificate which can be for free or fee. The material for this course can be viewed without login requirement on this Bookdown website. This format might be most appropriate for you if you rely on screen-reader technology. This course can be taken for free certification through Leanpub. This course can be taken on Coursera for certification for a fee here. Our courses are open source, you can find the source material for this course on GitHub. "],["introduction.html", "Chapter 1 Introduction 1.1 Motivation 1.2 Target Audience 1.3 Curriculum 1.4 Objectives", " Chapter 1 Introduction This course is meant to get you started writing scientific manuscripts using LaTeX in Overleaf. 1.1 Motivation Overleaf is a very useful tool for collaborative scientific writing. It has an advantage over other potential collaborative writing options in that it enables for seamless changes in formatting and arrangement of text to allow you to submit to various publication platforms, such as preprint archives or scientific journals. Another advantage of Overleaf is that it is based on using LaTeX which makes it easy to add mathematical formulas to your writing. It also helps you do really complicated formatting and layouts with much more ease than other options and it makes it easy to replicate that complicated formatting/layout again for other papers or other writing products. It is widely used in certain fields like statistics and computer science. Therefore, it can also be useful to know about if you have collaborators in these fields. 1.2 Target Audience The course is intended for scientific writers who might be interested in learning how to automate some of their writing formatting/layouts. 1.3 Curriculum The course covers basic information about why LaTeX can be useful, how to get started in Overleaf using LaTeX with a template, how to work with a team on Overleaf, and what to do when you encounter problems. 1.4 Objectives "],["latex.html", "Chapter 2 LaTeX 2.1 Learning Objectives 2.2 Document Preparation System 2.3 History 2.4 Process 2.5 Benefits of LaTeX 2.6 Conclusion", " Chapter 2 LaTeX You may or may not have heard people talking about LaTeX (pronounced ‘/ˈlɑːtɛx/’ LAH-tekh or ‘/ˈleɪtɛx/’ LAY-tekh), which is not to be confused with the the material latex (pronounced ‘/ˈleɪtɛks/’ LAY-tekhs). In this course we will explain what LaTeX is and how it came to be. 2.1 Learning Objectives 2.2 Document Preparation System LaTeX is a “document preparation system” according to the LaTeX project (“LaTeX - A Document Preparation System” n.d.). It is often used to write scientific or technical documents, but it can be used for formatting or arranging any type of document. This process of determining the final look of a writing product is called typesetting. Typesetting determines how text looks and where it is located in a document when it is its final stage - like when it is rendered or printed. It refers to fonts, text sizing, line spacing, the arrangement of tables and images, and more. Although LaTeX has a reputation for being quite tricky, it is very powerful in enabling users to create documents with complex and customized text formatting and layouts much more easily than doing so with systems like Microsoft Word. 2.3 History LaTeX was originally released in 1984 by Leslie Lamport. LaTeX is one of several programs (but probably the most widely used in academia - in part, because it is free!) that makes it easier to use the typesetting system called TeX. Why is it called LaTeX? The “La” is believed to be for Lamport’s last name. The “Tex” is for the typesetting system Tex. 2.3.1 TeX TeX (pronounced ‘/ˈtɛx/’ tekh) is a typesetting system developed by Donald E. Knuth in the 1970s to help him format the text in his books more to his satisfaction (“TeX” 2022). Why is it called Tex? Tex is named as an abbreviation for the Greek word τέχνη (ΤΕΧΝΗ techn), which directly translates to art or craft (“TeX” 2022). Typesetting has origins in how documents used to be printed using manual stamping mechanisms, where someone would provide the contents of the text in writing by hand that would be translated to a version with the intended layout and style for printing. Overtime this process got replaced by digital options and eventually resulted in the concept of WYSIWYG (What you see is what you get), where programs like Microsoft Word let you interactively work with the typesetting of a document as you write the content. When you use a program like Microsoft Word, you are essentially giving it two sets of directions simultaneously, one which is the content of the text, and one which is the style and layout of the text. With LaTeX we are more aware that we are actually telling the computer how to arrange the text. It also gives us much more control of how we arrange, format, and style the text. If you are interested in taking a deep dive into how this all came to be, check out this blog post by Tirado (2020) and this O’Reilly book by Walsh (1994). 2.4 Process LaTeX can also be called a markup language. These means that certain text tags can be used to indicate how the content text should be formatted or displayed. Another markup language is HTML (which actually stands for HyperText Markup Language), which has text tags to indicate how the content text should be displayed on webpages. It is often used in computer science to enable humans to read or write files more easily and for computers to interpret these files more easily. Let’s use a simple example of making some text bold to illustrate this. Microsoft Word: If we wanted to some text bold in Microsoft Word, we would type the plain text that we want to bold just like the rest of the text. We would then select that text and click some buttons to make the text bold. HTML: In HTML we could instead use &lt;b&gt; at the beginning of the text we want to bold, and &lt;/b&gt; at the end to indicate that this text should be bold when it is rendered into it’s final state. LaTeX: Just like in HTML, LaTeX also uses text around the actual content text to describe how to produce the final product. In this case, we would indicate that we want bold text using a tag \\textbf with brackets around the text we want to change like so: \\textbf{bold text}. As you can see, LaTeX will feel a bit different from writing in Microsoft Word, as we will be using text tags to define how we want the content text to look. 2.5 Benefits of LaTeX Now that you are a little more clear about what LaTeX is, it might be easier to appreciate it’s benefits: Allows you to focus on the content and worry less about formatting (once you have a good template to work with). There are many specific templates to use format documents for various goals, such as formatting manuscripts for scientific journals. Allows for much more customization for complex typesetting/formatting of text. Once you have a template you like working with, say for a journal you frequently publish with, it is super easy to format future similar documents. If you need to change the typesetting/formatting of a document for the requirements of a different journal or preprint archive, you can do it much more quickly and with more ease than if you were to do it manually using a text editor like Microsoft Word. You can add languages with different alphabets or mathematical notation with much more ease than with traditional text editors You can collaborate with people who use LaTeX more easily 2.6 Conclusion We hope that this chapter has given you some more knowledge about what LaTeX is and how it came to be, as well as the benefits of using it. Here are some of the major take-home messages: Computers actually separate document creation into two tasks, creating the content text and arranging and styling that text. Traditional text editors like Microsoft Word show us what the final document will look like as we write it. LaTeX is a document preparation system that makes it easier to use the typesetting system TeX and allows you to create very complicated documents. Typesetting has to do with all the style, layout, and formatting that a document might need. LaTeX is a markup language and similar to HTML. Text tags around the content text can be used to indicate how the document should look when rendered into the final state. LaTeX allows you to more easily change how your document is laid out, which can be super beneficial if you need to accommodate different scientific journal requirements. Although LaTeX is used frequently in computer science, mathematics, statistics, and engineering fields to write technical papers, it can be used for other kinds of documents too! References "],["overleaf.html", "Chapter 3 Overleaf 3.1 Benefits of Overleaf 3.2 Getting Started 3.3 Working with Templates 3.4 Viewing documents 3.5 Making changes 3.6 Conclusion", " Chapter 3 Overleaf Overleaf is a free online LaTeX editor, meaning it helps you write text using LaTeX to determine how your document will look. In this chapter we will introduce you to Overleaf and get you set up to create a document. Since LaTeX can be pretty tricky, Overleaf can be super helpful! As a LaTeX editor, Overleaf shows you what the result of your LaTeX tags will be, suggests possible LaTeX tags, and provides you with helpful guidance. We will learn more about each of these in this overview. 3.1 Benefits of Overleaf There are other LaTeX editors, but Overleaf is a really nice option for a number of reasons: It is free! It’s online and requires no installations. It makes it much easier to write using LaTeX. It can continually show you a preview of your final document. It makes it easy to collaborate with others. There is lots of online support. It can sync with GitHub or Dropbox (if you pay for a paid plan). 3.2 Getting Started To start, you need to make an account on Overleaf. To do so, you can go to https://www.overleaf.com/register in your browser. There are several ways to register: Register with an IEEE account Register with your Google account Register with your ORCID account Register with a different email address Log in with an institution. This is worth checking in case your university has a license, as this may provide you with more features. The free version only allows you to have one collaborator on a project, so collaboration is more limited. However, you can still benefit from many of the other features. Note that students can receive a discount as well. If possible, it may be worth seeing if your institute would get an organizational license. 3.3 Working with Templates Overleaf is organized with projects. When you create a project, you can start from scratch or start from a template. Let’s start with a template to help us better understand the features of Overleaf. We can search through all the templates by clicking on “View All” button of the project menu. We can also click on the “templates” tab to get to the same template search page. You can see that there are many templates to choose from! There are templates for writing a letter, writing a thesis, writing a CV, writing a book and more. Tip! - If you need to write a thesis or you have a student that needs to write one, check to see if your university or department has a LaTeX template that you can use to help everyone save time on formatting and spend more time writing the content. Let’s search for a term, such as “preprint” to see if the templates for preprints. You will see that a few of the templates have a blue “official” tag. This is the best option if you find one for the publisher that you are interested in. We will use a template for arXiv. You can go to this link to start with the same particular template to create a manuscript for arXiv. Click the “Open as Template” button to get started. 3.4 Viewing documents Now that we have opened a template, we will start by understanding how we can view our work on Overleaf. Overleaf easily shows you what the rendered version of your text will look like, taking into account the LaTeX tags that indicate how the text should be arranged and styled. The default view is to see the raw text (aka source text) on the left and the rendered/compiled version on the right. You can also change the view to several other options: If you are using the default view and you want to see what the file looks like in the rendered form for the same location as that of the source text of the editor, you can click on the arrow (with the arrowhead facing to the right) in between. To do the opposite and go to the location in the source text where you are currently viewing in the rendered text, click the arrow button facing the source text editor. If you make a change in the source and want to see how it changes the look of the file, you need to press the “Recompile” button. It is a good idea to press the “Recompile” button frequently, so that you can identify any errors more easily. If you wait too long to check, then you will have more new changes to look through to try to understand the error. 3.5 Making changes Now let’s try a simple change to start getting used to writing with LaTeX. First we will change the title, which is currently “Predict future sale”. We can search the source editor text by clicking on the editor pane and using the search and find keyboard shortcut (control and the F key). If we type “Predict future sale” in the text box, we find it on line 19 following \\title. We can now replace the text with our own title. Be careful to make sure that the brackets are closed around the replacement text. Here we replace it with “New Title.” Now we can click the “Recompile button” to see the results. After overleaf has finished compiling, you can see that the title has been changed. Congratulations! You just made your first edit in Overleaf. In the next chapter, we will take a deeper dive into editing documents. 3.6 Conclusion We hope that this chapter has given you some more knowledge about what Overleaf is and how it can help you write documents, as well as the benefits of using it. Here are some of the major take-home messages: Overleaf is a collaborative LaTeX editor, that helps you write documents using LaTeX. Benefits of Overleaf include: it’s free (although you can pay for more features), it’s online and requires no installations, it shows you a preview of how your document will look, it makes it easier to collaborate with others. To use Overleaf you need to make an account first, which takes just a few minutes. There are many templates that you can use to write many different types of documents, including journal articles, CVs, graphics, and more! Some journals have even vetted templates to be their official template, look for the blue “official” tag. It’s a good idea to keep pressing the “recompile” button often as you make changes so that you can more easily see what might be causing an error if something goes wrong. "],["writing-with-overleaf.html", "Chapter 4 Writing with Overleaf 4.1 LaTeX Basics 4.2 Conclusion", " Chapter 4 Writing with Overleaf Now that you know the advantages of using Overleaf and have started working with a template, we will now discuss more about how to make additional modifications to your document. 4.1 LaTeX Basics Since we are working with a template, it isn’t necessary to learn everything there is to know about writing in LaTeX to get started. However, it can be useful to understand some fundamentals, so we will go over most of the commands that you see listed in the template. 4.1.1 Document Class At the top of the template you will notice \\documentclass{article}. This specifies general typesetting information about the type of document that we intend to make. For example, it often specifies font size, the overall layout of the text, and alignment of various features of the text. Since we are writing a scientific article, the specification here is article. To learn more about document classes see this documentation link form Wu (n.d.). 4.1.2 Packages Next you will see that \\usepackage{} is repeated several times with different information in the brackets: We will refer to these tags with brackets such as \\usepackage{} as commands from now on (as this is what the are generally referred to) and they cause a change to either the text within the brackets or the overall document. The \\usepackage{} command installs packages, which are collections of code that help you do additional things with your documents. Packages need to be installed before commands from those packages can be used. Commands from these packages will be utilized later in the template. It is recommended that you leave this code as is, and only modify the rest of the template until you learn more. In addition to determining what commands you can use, packages will also determine how the content is formatted or laid out. 4.1.3 Author section You may recall that we previously described how to bold font using \\textbf{bold text}. With LaTeX you will be using brackets often to designate what to do with a specific set of text that is contained within the brackets. If you do not close a set of brackets you will get an error, so be careful about this. As we scroll down the template, we next see the \\title command that we previously worked with when we modified the text within the brackets to change the title. Then we see the \\author command, which adds authors to the paper. These will be formatted in the way that is shown on the template. When you see \\\\ two backslashes, this indicates that the line is finished and a new one is to be made. For tables or formatting like the authors, it should work well, but it is best to avoid using this for line breaks within the paragraphs that you might include in the paper. We also see another command \\textttt{} used within the \\author{} command to change the text to typewriter font. You may also notice %% examples of other authors is in green and does not show up in the rendered document. This is what is called a comment and it can be used to write notes about the material. In the author section, the \\And allows for additional authors to be added. It must be used between each author listing. Finally, the author section needs to be completed by closing the brackets. 4.1.4 Formatting the Document Body The command \\begin{document} enables us to format text for the body of the article. This command comes directly after the author section. It will be paired with \\end{document} that you will see at the bottom of the template if you scroll down. If you put %% in front of the command to change it to a comment (therefore not using it), you will see that the overall document is formatted slightly differently. The \\maketitle will add the title the page where the begin{document} command was used. If it is placed before begin{document}, the title and authors will show up on a separate page. You can test moving this command around to see how the document changes. 4.1.5 Abstract The abstract section can be distinguished using the begin{} and end{} functions just like we used for the body of the document. These two commands will also be used later to indicate that a specific part of the document has started or ended. 4.1.6 Dummy text You may notice \\lipsum[] is used to create random chunks of text. The number within the brackets indicates what specific dummy paragraph to use. There are 150 possible, so the maximum value allowed in the brackets is 150. 4.1.7 Sections \\section{section name} - This will help you to create sections in the template. We don’t need to do anything to modify the text, it will automatically bold the text and number the sections (1, 2, 3 etc.). \\subsection{subsubsection name} - This will help you to create subsections. These headings will be one level down from the section headings and will be numbered like 1.1, 1.2. \\subsubsection{subsubsection name} - This will help you to create sections one level down from subsections. These heading will be numbered like 1.1.1, 1.1.2. In the template you can see how these are formatted: You can specify if you want sections to be not be numbered when using an asterisks * between the command name and the brackets section*{}. The \\paragraph{} command works similarly, but without numbering. The text within the brackets is an optional word or phrase that will have bold font to start the paragraph. You can also leave it empty. 4.1.8 Equations It can be very helpful to include a mathematical equation. To do so we need to use our handy \\begin{equation} and \\end{equation} functions to indicate the boundaries. Using equation within the brackets indicates that this should be formatted in a certain way. It will center the text nicely and number it. For more information about mathematical expressions in overleaf see the Overleaf documentation. 4.2 Conclusion We hope that this chapter has helped you feel more confident to start filling out the template with your own content. Here are some of the major take-home messages: The \\documentclass{article} command indicates that we are creating a scientific article. Packages are used to add additional features for users, to install them for a document we need to use the \\usepackage{} command. Be careful about your brackets when writing your code. If you leave one set open it could cause an error. The double backslash \\\\ can indicate the end of an item in the author list for example. The begin{} and end{} commands indicate when an element is starting or finishing. This could just be an abstract, or the entire body of the document. Section headers can be automatically numbered and styled. The section{}, subsection{}, and subsubsection{} will make progressively more nested sections. LaTeX is great for including mathematical notations and equations in documents. References "],["elements.html", "Chapter 5 Elements 5.1 Figures and Images 5.2 Tables 5.3 Creating internal links 5.4 References 5.5 Conclusion", " Chapter 5 Elements Figures &amp; tables &amp; citations, oh my! Now that you know some of the basics about how to add text to a template, let’s look at adding other elements that are important for scientific communication, like adding figures and images, adding tables, and adding references/citations. In this next chapter, we will introduce how to do this in LaTeX/Overleaf. You will notice that the template has a few examples of each of these elements that we will walk through now. 5.1 Figures and Images Most scientific articles have figures, so it is helpful to know how to add these to documents. Once you have a figure file that you are ready to add (like a PNG or a JPEG file), there are two main steps to insert them into your document. Like you did while creating the body of the document, you will use the \\begin{} and end{} functions when to add a figure in LaTeX. However, this time the you will use \\begin{figure} and \\end{figure} to tell Overleaf you are creating an element that is a figure. The first figure in the template is a box created in LaTeX, so we will instead focus on the second figure. You might notice that in addition to the \\begin{figure} and \\end{figure} commands, there is a \\centering{}command, which will align the figure to the center of the page. The includegraphics{text.png} portion of the code actually adds the figure into the document. Note that comments with one percent sign can be used after code - thus the % picture is just telling you that this part of the code is adding a picture. People use different numbers of percent signs based on preference and convention, but just one percent sign is sufficient to turn anything following that into a comment. You may notice on the left side of the template in Overleaf that there are a few files listed, including the name of the image file used in the code for the figure: test.png. The template.tex file is the file we have been working in. If you click on the name of the image file you will see a preview of the image. What are these other files? The template.tex file is the file we have been working in that contains the main document content text and code to format the text. The reference.bib file contains the bibliography information that will be used by the template.tex file. The README.md file will tell you more about the template that you are using. The arxiv.sty file is a style file that contains code more specifically style the document for arXiv preprints. This code is then applied in our template.tex file (the one we have been working in) by the command , because that is the name of the .sty file. To upload an image file to add a new figure, you can click on the new file button, which is the icon that looks like a piece of paper with the right upper corner folded. Then select the upload button to drag and drop a new image file from your computer. The next step to add this new figure to your document, is to add the code above but modified so that the name of the image file matches the name of the file you uploaded. \\begin{figure} % picture . \\centering . \\includegraphics{new.png} \\end{figure} 5.2 Tables As when adding figures, you need the \\begin{} and \\end{} commands in your file to designate where the instructions for your table begin and end. In this case we use table with \\begin{table} and \\end{table}. Here is all of the code to create the following table. We will go through each command and explore what it does to create the table. We can add a caption using the \\caption{} command. The table number will automatically be determined by the order of the tables. As before with the figure, the \\centering command will then align the resulting table to be centered. To create the table in the template, we will first indicate how we want the table arranged using the tabular environment. The command \\begin{tabular}{lll} indicates that we will have three columns that are left aligned. The \\toprule command adds a solid line at the top of the table. If you add this command again you will see two lines - test it out to see how it works! The command \\multicolumn{2}{c}{Part}\\\\ indicates that will will merge some columns together to create a “multicolumn” in this case the {2} means we will merge together 2 columns, the {c} indicates that it will be center aligned and the {Part} is the text we want for this. We need the \\\\ to finish that row, otherwise “Part” will end up on the next row. The \\cmidrule command adds the line or “rule” under the multicolumn that says “Part”. This command creates lines that are not the full width of the table. The (r) {1-2} indicates that the line should be trimmed on the right side to leave a gap after the span of 2 column widths. Now we are ready to put some text within our table cells. We can simply type the words with an &amp; in between the text for each cell to indicate where the column breaks are. The \\\\ indicates when we are done with that row. Since we have a special character to represent mu, we can use mathematical notation by using a dollar sign $. To add a line under these values, we can use the \\midrule command. To add more text within the rows after this line, we simply type words, using an &amp; to indicate column breaks and the \\\\ to indicate the end of the row. The $ is also used to create mathematical notations. To add the line at the bottom, we need to use a command that is similar to toprule{} and midrule{} which is bottomrule{}. Now we just need to finish off our table. First we need to get out of the tabular mode, so we will use our trusty \\end{} function. In this case, we end with \\end{tabular}. To end the table overall, we use \\end{table}. We will discuss what the \\label{} function does soon. To add the line at the bottom, we again use \\bottomrule{}. 5.3 Creating internal links You may have noticed a command \\label{} when looking through the template. This is a very helpful command that creates a tag that allows you to refer back to a figure or a section header. There is also a nifty command \\ref{} that creates references for these tags. However, it is a little tricky, so we will walk through a couple of examples. You need the \\ref{} command to match up with exactly what you have listed for the \\label{} command for each tagged figure, table, or section. You also need to have the same notation for each type: - tab: for tables - fig: for figures - sec: for section headers Here we will create a new link for the introduction. We first need to add a label to the introduction using the label{} function. We will call it intro and we need to specify that this is a section header with sec , like so: label{sec:intro}. We then need to refer to this in the same way somewhere else using the ref{} function, like so: ref{sec:intro}. This will create a link to that section. 5.4 References Almost all scientific articles need references. To add these we can add to the references.bib file, which is found on the left menu. There are many ways to get the bib version of a reference. One easy way is to use Zotero, which is a free tool for writing bibliographies that has a chrome extension. The cool thing about the chrome extension is if you are viewing an article or a website online, you can often right click to add the file to Zotero. Then you can find the file in Zotero and right click to export the item to BibTeX format. This is a bibliography format that is compatible with TeX. We can then copy and paste this into the references.bib file, being careful to make sure that the brackets are closed. The first part of the bib item will indicate what to refer to it in the text to create a citation to the reference. The first item that starts with an @ in the template references.bib file shows kour2014real in the brackets. We can see that line 100 uses the \\cite{} function to cite this article, as well as another article. This results in a citation number and a link to the reference. To add a bibliography, we can just undo the comment in front of the bibliography command. This is sufficient to create the bibliography. The code after this in the template to create each reference individually is not needed. 5.5 Conclusion We hope that this chapter has given you some guidance about how to start adding images, tables, internal links, references and citations to your document. Here are some of the major take-home messages: Many of these elements require the \\begin{} and \\end{} function to indicate where the element starts and finishes. Images can be added by first uploading an image file to Overleaf and using the \\begin{figure}, \\includegraphics{imagfileename.png}, and \\end{figure} at minimum. Tables can be quite tricky, but you can control basically every aspect about how a table looks which can be really powerful. Remember to start with begin{table} and end with \\end{table}, this helps add a new number to each of your tables when they are automatically numbered. the \\begin{tabular} function helps you to start a table. It can also help you define the overall width and default alignment. Table content within cells can be delineated with an &amp; to indicate column breaks. The \\\\ is needed to end a row. To refer to a table, figure, or section of text you can use the \\label{} and \\ref{} commands, but make sure that the label is the same and that you use tab for table, fig for figure, and sec for section. The \\references.bib file of the template can be modified to add different or additional references. These can come from using Zotero to get a BibTeX version of the reference. To cite a paper within the document you can use the \\cite{} command. To add the bibliography we can just use the command that was in comments bibliography{references}. "],["troubleshooting.html", "Chapter 6 Troubleshooting 6.1 Code Suggestions 6.2 Symbol Palette 6.3 History 6.4 Log 6.5 Trouble Compiling 6.6 Getting Help 6.7 Conclusion", " Chapter 6 Troubleshooting Overleaf has lots of ways to make writing in LaTeX easier. In this chapter we will cover several of these ways, as well as how to identify and fix a problem if you encounter one. 6.1 Code Suggestions As you type code, Overleaf makes code suggestions based on what you have already typed. You can click on a suggestion to use it. Overleaf will also offer suggestions on what to put within command brackets. This can be great if you can’t quite remember what a command is or if you are trying to write a document faster. 6.2 Symbol Palette If you need to use many symbols or mathematical notations in your work, the symbol palette can be very helpful. You can access it by pressing the button that looks like an omega symbol at the top of the source editor. 6.3 History If you change something and want to see what it was like previously, you can checkout the History tab. Here you will see the most recent changes as slices of changes overtime. Changes will be highlighted in a color that coordinates with specific users. So if you have collaborators you can see their changes here as well. If you are using the comparison mode you will see the changes and who made them. However, you can also just look at the files from a specific point in time without seeing changes by clicking on the “view single version” button. For more information about using the history features of Overleaf, see this documentation “Using the History Feature” (n.d.). 6.4 Log If you check the log by clicking on the button to the right of the recompile button, you will see messages about any warnings or errors. The link button at the top of each message will take you to the line of the file that is problematic. Hovering on the red circle right next to the line number will show you information about what might be wrong with that line. 6.5 Trouble Compiling Occasionally, you will not be able to compile your document and will get an error. When this happens, look for yellow triangles or red circles in your source code to determine what might have gone wrong. Remember if you hover over them, they will give you helpful messages. Keep in mind that sometimes an error happens earlier than where a red circle is indicated. Here is an example of brackets that were not closed on line 76 where the yellow triangle is, but the red circle shows up on the next line because Overleaf expects you to close it here. Remember, it is a good idea to press the “Recompile” button frequently, so that you can identify any errors more easily. If you wait too long to check, then you will have more new changes to look through to try to understand the error. 6.6 Getting Help There are many useful resources if you get stuck: The Overleaf documentation has lots of helpful information: https://www.overleaf.com/learn These pages are especially useful: Troubleshooting errors Learning LaTeX How-to guides Creating tables The TeX stackexchange: https://tex.stackexchange.com/ TeX blog: https://texblog.org/tex-resources/ LaTeX project: https://www.latex-project.org/help/documentation/ If you are submitting a paper to arXiv these resources may also be helpful: https://www.overleaf.com/learn/how-to/LaTeX_checklist_for_arXiv_submissions https://info.arxiv.org/help/submit_tex.html 6.7 Conclusion We hope that this chapter has given you some guidance about how to make it easier to write your documents, identify errors, and find help. Here are some of the major take-home messages: Overleaf offers helpful code suggestions to make writing easier. Overleaf has a symbol palette to help you write with symbols. This can be accessed by pressing the symbol button, which looks like an omega, at the top menu. You can see changes and previous versions of a document under the history tab. This also shows you who made those changes. The log can give you more information about any errors or potential issues with your document. Each message in the log has a link to take you to the potentially problematic line of code. Triangles and circles in the left side of the source editor can indicate issues. If you hover over them, more information will pop up about what the problem might be. Keep in mind that sometimes an error or issue is due to something earlier in the code. If you run into an issue, there are lots of resources to help you! References "],["collaborating.html", "Chapter 7 Collaborating 7.1 Learning Objectives 7.2 Seeing collaborators 7.3 Sharing 7.4 Submitting 7.5 Messages 7.6 Review mode 7.7 Conclusion", " Chapter 7 Collaborating Collaborating on Overleaf is much more doable if you have access to a paid plan. If you have a collaborator who has a paid plan, then you will have access to the features that are part of their plan. Overleaf may change which of the following features are available for free vs paid accounts. 7.1 Learning Objectives 7.2 Seeing collaborators Different users will show up as a square with the first initial of their username if collaborators are also working on the same file. 7.3 Sharing You can share a project with a collaborator (or with the world) similarly to a Google document. Just click on the share button and specify how you want people to access your project. 7.4 Submitting When you are ready to submit a document to a publisher, like a preprint to arXiv, you can do so using the submit button. 7.5 Messages You can send general messages using the “Chat” button. 7.6 Review mode If you press the “review” button, which is to the right of the “share” button, you can enable certain reviewing features. You will see a gray column open to the right of the source editor. Here you can add comments and toggle on and off the tracking of changes. 7.6.1 Adding comments You can also write comments about specific text by highlighting the text in review mode (by first pressing the review button) and then clicking “add comment”. Comments need to be verified to be posted. They can then be edited, resolved, or responded to. Resolved comments can be found at the top left button in the review panel when in review mode. 7.7 Conclusion We hope that this chapter has given you some guidance about how to collaborate with others on Overleaf. Here are some of the major take-home messages: Collaboration is easier with a paid plan. If you collaborate with someone on a paid plan, you will also have access to collaboration features when working on that project. The features available for each type of plan may change. When collaborators are actively working on a project you will see an icon at the top menu as a colored square with a letter in it. You can share projects similarly to Google Docs meaning that you can specify if a particular person has access or if anyone with a link can either just read or edit a project. You can actually submit manuscripts directly to some journals, as well as preprints to arXiv by using the submit button. You can send general messages to collaborators using the Chat button. In review mode, which is activate when you press the Review button, you will see a panel that allows you to write and see comments, as well as turn on or of the tracking of changes. Comments can be made by highlighting code in review mode and then clicking “add comment”. After you write a comment you need to click the “Comment” button. Comments can be edited, resolved, or replied to. "],["connecting-to-github.html", "Chapter 8 Connecting to GitHub 8.1 Learning Objectives 8.2 Syncing files 8.3 Conclusion", " Chapter 8 Connecting to GitHub If you have a paid version of Overleaf, then you can connect your projects to GitHub. This can be really helpful for better understanding the history of a document overtime, especially if you already use GitHub. We will not cover what GitHub is and how to use it in this chapter, but this resource can be helpful to get you started. 8.1 Learning Objectives To do so, you need to first click on the home button (looks like an icon of a house on the upper left) to go to the main menu (if you are not already there, this will be the case if you working on a project). Here you should see a list of any projects you have created or collaborated on. On the far upper right click on the “Account” button. Then click on “Account Settings”. Next, scroll down to where you see the heading for “Project Synchronisation.” Click on the blue “Link” button next to the GitHub section. If you already have a GitHub account, you will be asked to grant access. Now that you have connected your GitHub account with your Overleaf account, you can now set up a project to sync with GitHub. To do so, first open the project that you would like to sync with GitHub from the project menu (the home icon button). Next click the Overleaf menu button the far left upper corner. Then scroll down to the “Sync” section. The window that pops up about exporting the project to GitHub will then show up. This will create a new repository on GitHub with the files from your project. 8.2 Syncing files If you then make a change on GitHub and merge it with the main branch, you can pull these changes back to Overleaf. To do so, navigate back to the Overleaf Menu in the project on the far left side. Scroll back down to the sync section for GitHub. You will see a window with buttons to sync changes back and forth from GitHub and Overleaf. Now to get the change from GitHub you can press the “Pull GitHub changes into Overleaf” button. To do the opposite and send changes to GitHub from Overleaf, click on the lower button, “Push Overleaf changes to GitHub”. 8.3 Conclusion We hope that this chapter has given you some guidance about how to connect GitHub with Overleaf. Here are some of the major take-home messages: There are 3 steps to sync changes to and from a project on Overleaf with GitHub: connecting the your GitHub account and your Overleaf account, setting up a project to sync with Github, getting changes from each place. To do these syncs, you will do so for each project individually, and a repository will be made for each Overleaf project. You can make this repository private or public. To navigate to the menu to sync changes, go to the menu with the Overleaf icon on the far left upper corner when you have already opened a project. "],["about-the-authors.html", "About the Authors", " About the Authors These credits are based on our course contributors table guidelines.     In memory of James Taylor, who was instrumental in initiating this project.   Credits Names Pedagogy Lead Content Instructor(s) Carrie Wright Content Editor(s)/Reviewer(s) Elizabeth Humphries Technical Course Publishing Engineer(s) Carrie Wright Template Publishing Engineers Candace Savonen, Carrie Wright, Ava Hoffman Publishing Maintenance Engineer Candace Savonen Technical Publishing Stylists Carrie Wright, Ava Hoffman, Candace Savonen Package Developers (ottrpal) Candace Savonen, John Muschelli, Carrie Wright Art and Design Figure Artist Carrie Wright Funding Funder(s) National Cancer Institute (NCI) UE5 CA254170 Funding Staff Sandra Ormbrek, Shasta Nicholson   Tools Used: ## ─ Session info ─────────────────────────────────────────────────────────────── ## setting value ## version R version 4.3.2 (2023-10-31) ## os Ubuntu 22.04.4 LTS ## system x86_64, linux-gnu ## ui X11 ## language (EN) ## collate en_US.UTF-8 ## ctype en_US.UTF-8 ## tz Etc/UTC ## date 2025-10-02 ## pandoc 3.1.1 @ /usr/local/bin/ (via rmarkdown) ## ## ─ Packages ─────────────────────────────────────────────────────────────────── ## package * version date (UTC) lib source ## bookdown 0.43 2025-04-15 [1] CRAN (R 4.3.2) ## bslib 0.6.1 2023-11-28 [1] RSPM (R 4.3.0) ## cachem 1.0.8 2023-05-01 [1] RSPM (R 4.3.0) ## cli 3.6.2 2023-12-11 [1] RSPM (R 4.3.0) ## devtools 2.4.5 2022-10-11 [1] RSPM (R 4.3.0) ## digest 0.6.34 2024-01-11 [1] RSPM (R 4.3.0) ## ellipsis 0.3.2 2021-04-29 [1] RSPM (R 4.3.0) ## evaluate 1.0.4 2025-06-18 [1] CRAN (R 4.3.2) ## fastmap 1.1.1 2023-02-24 [1] RSPM (R 4.3.0) ## fs 1.6.3 2023-07-20 [1] RSPM (R 4.3.0) ## glue 1.7.0 2024-01-09 [1] RSPM (R 4.3.0) ## htmltools 0.5.7 2023-11-03 [1] RSPM (R 4.3.0) ## htmlwidgets 1.6.4 2023-12-06 [1] RSPM (R 4.3.0) ## httpuv 1.6.14 2024-01-26 [1] RSPM (R 4.3.0) ## jquerylib 0.1.4 2021-04-26 [1] RSPM (R 4.3.0) ## jsonlite 1.8.8 2023-12-04 [1] RSPM (R 4.3.0) ## knitr 1.50 2025-03-16 [1] CRAN (R 4.3.2) ## later 1.3.2 2023-12-06 [1] RSPM (R 4.3.0) ## lifecycle 1.0.4 2023-11-07 [1] RSPM (R 4.3.0) ## magrittr 2.0.3 2022-03-30 [1] RSPM (R 4.3.0) ## memoise 2.0.1 2021-11-26 [1] RSPM (R 4.3.0) ## mime 0.12 2021-09-28 [1] RSPM (R 4.3.0) ## miniUI 0.1.1.1 2018-05-18 [1] RSPM (R 4.3.0) ## pkgbuild 1.4.3 2023-12-10 [1] RSPM (R 4.3.0) ## pkgload 1.3.4 2024-01-16 [1] RSPM (R 4.3.0) ## profvis 0.3.8 2023-05-02 [1] RSPM (R 4.3.0) ## promises 1.2.1 2023-08-10 [1] RSPM (R 4.3.0) ## purrr 1.0.2 2023-08-10 [1] RSPM (R 4.3.0) ## R6 2.5.1 2021-08-19 [1] RSPM (R 4.3.0) ## Rcpp 1.0.12 2024-01-09 [1] RSPM (R 4.3.0) ## remotes 2.4.2.1 2023-07-18 [1] RSPM (R 4.3.0) ## rlang 1.1.6 2025-04-11 [1] CRAN (R 4.3.2) ## rmarkdown 2.25 2023-09-18 [1] RSPM (R 4.3.0) ## sass 0.4.8 2023-12-06 [1] RSPM (R 4.3.0) ## sessioninfo 1.2.2 2021-12-06 [1] RSPM (R 4.3.0) ## shiny 1.8.0 2023-11-17 [1] RSPM (R 4.3.0) ## stringi 1.8.3 2023-12-11 [1] RSPM (R 4.3.0) ## stringr 1.5.1 2023-11-14 [1] RSPM (R 4.3.0) ## urlchecker 1.0.1 2021-11-30 [1] RSPM (R 4.3.0) ## usethis 2.2.3 2024-02-19 [1] RSPM (R 4.3.0) ## vctrs 0.6.5 2023-12-01 [1] RSPM (R 4.3.0) ## xfun 0.52 2025-04-02 [1] CRAN (R 4.3.2) ## xtable 1.8-4 2019-04-21 [1] RSPM (R 4.3.0) ## yaml 2.3.10 2024-07-26 [1] CRAN (R 4.3.2) ## ## [1] /usr/local/lib/R/site-library ## [2] /usr/local/lib/R/library ## ## ────────────────────────────────────────────────────────────────────────────── "],["references-1.html", "Chapter 9 References", " Chapter 9 References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
